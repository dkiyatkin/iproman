#!/usr/bin/env node

var argv = require('optimist').argv;

this.projects = require(__dirname + '/../lib/projects.js');
this.ftp = require(__dirname + '/../lib/ftp.js');
this.svn = require(__dirname + '/../lib/svn.js');

var self = this;

if (require.main === module) { // если приложение запускается как отдельная программа
	var end = function(err, data) {
		if (!err) {
			if (data) {
				console.log(JSON.stringify(data, null, '  '));
			}
		} else {
			if (err == 1) { err = 'Ошибка'; }
			console.error(err);
			process.exit(1);
		}
	};

	if (argv.config) {
		var project = argv._[0];
		self.projects.info(argv.config, function(err, defconf) {
			project = (typeof(argv.info)=='string')?argv.info:argv._[0];
			if (argv.create) { // создание
				project = (typeof(argv.create)=='string')?argv.create:argv._[0];
				if (project && defconf.svn.repos && defconf.svn.trunks && defconf.host && defconf.svn.templates && project && defconf.svn.configs && argv) {
					if (!defconf.svn.projects[project]) {
						self.svn.create(
								project, defconf.svn.repos, defconf.svn.trunks,
								defconf.host, defconf.svn.templates, 'trunk',
									function(err, data) {
							self.projects.setDefault(project, defconf.svn.configs, argv, function(err, data) {
								end(err, data);
							});
						});
					} else { end('Проект уже существует'); }
				} else { end('Ошибка данных'); }
			} else if (argv.set) { // настройка
				project = (typeof(argv.set)=='string')?argv.set:argv._[0];
				if (project && defconf.svn.configs && argv) {
					if (defconf.svn.projects[project]) {
						self.projects.updateProject(
								project, defconf.svn.projects[project], defconf.svn.configs, argv,
								function(err, data) {
							end(err, data);
						});
					} else { end('Проект не существует'); }
				} else { end('Ошибка данных'); }
			} else if (argv.sync) { // синхронизация
				project = (typeof(argv.sync)=='string')?argv.sync:argv._[0];
				if (project && defconf && argv) {
					if (defconf.svn.projects[project]) {
						self.ftp.sync(project, defconf.svn.projects[project], defconf, argv, function(err, data) {
							end(err, data);
						});
					} else { end('Проект не существует'); }
				} else { end('Ошибка данных'); }
			} else if (argv.freeze) { // заморозка
				project = (typeof(argv.freeze)=='string')?argv.freeze:argv._[0];
				if (defconf.svn.projects[project]) {
					self.svn.freeze(project, defconf.svn.configs, defconf.svn.trunks, defconf.svn.auth, argv, function(err, data) {
						if (!err) {
							end(err, data.split('\n'));
						} else { end(err); }
					});
				} else { end('Проект не существует'); }
			} else if (argv.backup) { // резервная копия
				project = (typeof(argv.backup)=='string')?argv.backup:argv._[0];
				if (project && defconf && argv) {
					if (defconf.svn.projects[project]) {
						self.ftp.backup(project, defconf.svn.projects[project], defconf, argv, function(err, data) {
							end(err, data);
						});
					} else { end('Проект не существует'); }
				} else { end('Ошибка данных'); }
			} else if (argv.remove) { // удаление
				project = (typeof(argv.remove)=='string')?argv.remove:argv._[0];
				if (project && defconf.svn.configs && defconf.svn.trunks && defconf.svn.repos && defconf.backups && argv) {
					if (defconf.svn.projects[project]) {
						self.projects.remove(
								project, defconf.svn.configs, defconf.svn.trunks, defconf.svn.repos, defconf.backups, argv,
								function(err, data) {
							end(err, data);
						});
					} else { end('Проект не существует'); }
				} else { end('Ошибка данных'); }
			} else { end(err, defconf); } // общая информация
		});
	}
}
